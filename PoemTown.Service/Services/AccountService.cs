using AutoMapper;
using MassTransit;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using PoemTown.Repository.CustomException;
using PoemTown.Repository.Entities;
using PoemTown.Repository.Interfaces;
using PoemTown.Repository.Utils;
using PoemTown.Service.BusinessModels.RequestModels.AccountRequests;
using PoemTown.Service.BusinessModels.ResponseModels.AccountResponses;
using PoemTown.Service.Events.EmailEvents;
using PoemTown.Service.Interfaces;

namespace PoemTown.Service.Services;

public class AccountService : IAccountService
{
    private readonly UserManager<User> _userManager;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IPublishEndpoint _publishEndpoint;
    private readonly ITokenService _tokenService;
    private readonly IMapper _mapper; 
    
    public AccountService
    (
        UserManager<User> userManager, 
        IUnitOfWork unitOfWork,
        IPublishEndpoint publishEndpoint,
        IMapper mapper,
        ITokenService tokenService
        )
    {
        _userManager = userManager;
        _unitOfWork = unitOfWork;
        _publishEndpoint = publishEndpoint;
        _mapper = mapper;
        _tokenService = tokenService;
    }
    

    /// <summary>
    /// Check if user is already confirmed email or not and check if email otp is correct and not expired then set email confirmed to true
    /// </summary>
    /// <param name="request"></param>
    /// <exception cref="CoreException"></exception>
    public async Task ConfirmEmail(ConfirmEmailRequest request)
    {
        User? user = await _userManager.FindByEmailAsync(request.Email);
        
        if(user == null)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "User not found");
        }
        
        if(user.EmailConfirmed)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "Email is already confirmed");
        }
        
        if(user.EmailOtp != request.EmailOtp)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "Email Otp is incorrect");
        }
        
        //Check if email otp is expired in 5 minutes as unix timestamp
        if(String.CompareOrdinal(user.EmailOtpExpiration, TimeStampHelper.GenerateUnixTimeStampNow().ToString()) < 0 )
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "Email OTP is expired");
        }
        //Set email confirmed to true and remove current email otp
        user.EmailConfirmed = true;
        user.EmailOtp = null;
        user.EmailOtpExpiration = null;
        
        await _userManager.UpdateAsync(user);
    }

    public async Task SendEmailOtp(ResendEmailConfirmationRequest request)
    {
        User user = await _userManager.FindByEmailAsync(request.Email);
        if(user == null)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "User not found");
        }
        
        //generate new email otp and email otp expiration
        user.EmailOtp = OtpGenerator.GenerateOtp();
        user.EmailOtpExpiration = TimeStampHelper.GenerateUnixTimeStamp(0, 10, 0).ToString();
        await _userManager.UpdateAsync(user);
        
        //publish email otp to rabbitmq
        EmailOtpEvent message = new EmailOtpEvent
        {
            Email = user.Email,
            EmailOtp = user.EmailOtp
        };  
        await _publishEndpoint.Publish(message);
    }
    
    public async Task ChangePassword(Guid userId, ChangePasswordRequest request)
    {
        User user = await _userManager.FindByIdAsync(userId.ToString());
        if(user == null)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "User not found");
        }

        if (!user.EmailConfirmed)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "Email is not confirmed");
        }
        
        //Get salt from database and hash current password
        string? salt = await _unitOfWork.GetRepository<User>()
            .AsQueryable()
            .Where(p => p.Email == user.Email)
            .Select(p => p.Salt)
            .FirstOrDefaultAsync();
        
        string hashedPassword = PasswordHasher.HashPassword(request.CurrentPassword, salt);
        //check if hashedPassword with salt is equal to passwordHash in database by identity (hashedPassword in database is generated by identity - 2 times hash)
        bool checkPassword = await _userManager.CheckPasswordAsync(user, hashedPassword);
        
        if (!checkPassword)
        {
            throw new CoreException(StatusCodes.Status401Unauthorized, "Current password is incorrect");
        }
        
        //Generate new salt and hash new password with salt
        string newSalt = PasswordHasher.GenerateSalt();
        string newHashedPassword = PasswordHasher.HashPassword(request.NewPassword, newSalt);
        
        //Change password
        IdentityResult result = await _userManager.ChangePasswordAsync(user, hashedPassword, newHashedPassword);
        if(!result.Succeeded)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, result.Errors.First().Description);
        }
        
        //Update salt and save salt to database
        user.Salt = newSalt;
        await _userManager.UpdateAsync(user);
    }

    public async Task ForgotPassword(ForgotPasswordRequest request)
    {
        User? user = await _userManager.FindByEmailAsync(request.Email);
        if(user == null)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "User not found");
        }
        
        if (!user.EmailConfirmed)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "Email is not confirmed");
        }
        
        //Generate reset password token and expired timestamp
        string resetPasswordToken = await _userManager.GeneratePasswordResetTokenAsync(user);
        string timeStamp = TimeStampHelper.GenerateUnixTimeStamp(0, 10, 0).ToString();
        
        //publish email event to rabbitmq with reset password token and expired timestamp
        ForgotPasswordEvent message = new ForgotPasswordEvent()
        {
            Email = user.Email,
            ResetPasswordToken = resetPasswordToken,
            ExpiredTimeStamp = timeStamp
        };  
        await _publishEndpoint.Publish(message);
    }
    
    /// <summary>
    /// Create new password using reset password token and expired timestamp, receive from email
    /// </summary>
    /// <param name="request"></param>
    /// <exception cref="CoreException"></exception>
    public async Task NewPasswordForgot(NewPasswordForgotRequest request)
    {
        User user = await _userManager.FindByEmailAsync(request.Email);
        
        if(user == null)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "User not found");
        }
        
        if (!user.EmailConfirmed)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "Email is not confirmed");
        }
        
        if(String.CompareOrdinal(request.ExpiredTimeStamp, TimeStampHelper.GenerateUnixTimeStampNow().ToString()) < 0 )
        {
            throw new CoreException(StatusCodes.Status400BadRequest, "Reset password token is expired");
        }
        
        //Generate new salt and hash new password with salt
        string newSalt = PasswordHasher.GenerateSalt();
        string newHashedPassword = PasswordHasher.HashPassword(request.NewPassword, newSalt);
        
        //Change password using reset password token
        IdentityResult result = await _userManager.ResetPasswordAsync(user, request.ResetPasswordToken, newHashedPassword);
        if(!result.Succeeded)
        {
            throw new CoreException(StatusCodes.Status400BadRequest, result.Errors.First().Description);
        }
        
        user.Salt = newSalt;
        await _userManager.UpdateAsync(user);
    }
}